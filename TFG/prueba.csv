Origen,Destino
M:config.web.PluginPageDefinition:define(org.sonar.api.web.page.Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:config.web.PluginPageDefinition:define(org.sonar.api.web.page.Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:configuration.API:values(),(M)configuration.API[]:clone()
M:configuration.API:<clinit>(),(M)configuration.API:getCall()
M:configuration.API:<clinit>(),(M)configuration.API:getCall()
"M:configuration.ExportConfiguration:<init>(boolean,java.lang.String)",(M)configuration.ExportConfiguration:setOutput(java.lang.String)
M:configuration.ExportConfiguration:create(java.lang.String[]),(M)utils.CommandLineManager:parse(java.lang.String[])
M:configuration.ExportConfiguration:create(java.lang.String[]),(M)utils.CommandLineManager:hasOption(java.lang.String)
M:configuration.ExportConfiguration:create(java.lang.String[]),(S)utils.StringManager:getProperty(java.lang.String)
M:configuration.ExportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:configuration.ReportCommandLine$1:<init>(),(M)configuration.ReportCommandLine$1:add(java.lang.Object)
M:configuration.ReportCommandLine$1:<init>(),(M)configuration.ReportCommandLine$1:add(java.lang.Object)
M:configuration.ReportCommandLine$1:<init>(),(M)configuration.ReportCommandLine$1:add(java.lang.Object)
M:configuration.ReportCommandLine$2:<init>(),(M)configuration.ReportCommandLine$2:add(java.lang.Object)
"M:configuration.ReportCommandLine:main(java.lang.String[],java.lang.String[])","(S)configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])"
"M:configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])",(M)configuration.ReportConfiguration:create(java.lang.String[])
"M:configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])",(M)configuration.ExportConfiguration:create(java.lang.String[])
"M:configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])",(S)configuration.SonarRequestList:getSonarRequestList()
"M:configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])",(M)configuration.SonarRequestList:setExportConfiguration(configuration.ExportConfiguration)
"M:configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])","(M)configuration.SonarRequestList:execute(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)"
M:configuration.ReportConfiguration:create(java.lang.String[]),(M)utils.CommandLineManager:parse(java.lang.String[])
M:configuration.ReportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:configuration.ReportConfiguration:create(java.lang.String[]),(S)utils.StringManager:getProperty(java.lang.String)
M:configuration.ReportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:configuration.ReportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:configuration.ReportConfiguration:create(java.lang.String[]),(S)utils.StringManager:getProperty(java.lang.String)
M:configuration.ReportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:configuration.ReportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:configuration.ReportConfiguration:create(java.lang.String[]),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
"M:configuration.SonarRequestList:execute(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)",(S)configuration.SonarQubeServer:getSonarQubeServer()
"M:configuration.SonarRequestList:execute(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)","(M)configuration.SonarQubeServer:init(java.lang.String,boolean,int,int,int,int,boolean)"
"M:configuration.SonarRequestList:execute(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)",(M)factories.ReportModelFactory:create()
"M:configuration.SonarRequestList:execute(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)",(M)factories.ReportFactory:createFiles(java.util.ArrayList)
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)configuration.ExportConfiguration:getOutput()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getProjectName()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getProjectAuthor()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getProjectDate()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getBranch()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getComponentKey()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getLanguageList()
"M:exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)",(M)models.Report:getMetricList()
"M:exporters.CSVExporter:createMeasureReport(java.util.ArrayList,java.lang.String)",(M)models.Report:getMeasureList()
"M:exporters.CSVExporter:createMeasureReport(java.util.ArrayList,java.lang.String)",(M)models.Measure:getValue()
"M:exporters.CSVExporter:createMeasureReport(java.util.ArrayList,java.lang.String)",(M)models.Measure:getKey()
"M:exporters.CSVExporter:createMeasureReport(java.util.ArrayList,java.lang.String)",(M)models.Report:getMeasureList()
"M:exporters.CSVExporter:createMeasureReport(java.util.ArrayList,java.lang.String)",(M)exporters.CSVExporter:addToList(models.Measure)
M:exporters.CSVExporter:addToList(models.Measure),(M)models.Measure:getKey()
M:exporters.CSVExporter:addToList(models.Measure),(M)models.Measure:getValue()
M:factories.ReportFactory:createFiles(java.util.ArrayList),(M)configuration.ExportConfiguration:isEnableCSV()
M:factories.ReportFactory:createFiles(java.util.ArrayList),(M)configuration.ExportConfiguration:getOutput()
M:factories.ReportFactory:createFiles(java.util.ArrayList),(M)models.Report:getProjectName()
M:factories.ReportFactory:createFiles(java.util.ArrayList),"(S)factories.ReportFactory:formatFilename(java.lang.String,java.lang.String,java.lang.String)"
M:factories.ReportFactory:createFiles(java.util.ArrayList),"(M)exporters.CSVExporter:create(java.util.ArrayList,java.lang.String)"
"M:factories.ReportFactory:formatFilename(java.lang.String,java.lang.String,java.lang.String)",(S)utils.StringManager:getProperty(java.lang.String)
M:factories.ReportModelFactory:create(),(S)configuration.SonarRequestList:getSonarRequestList()
M:factories.ReportModelFactory:create(),(M)factories.ProviderFactory:create(java.lang.Class)
M:factories.ReportModelFactory:create(),(M)factories.ProviderFactory:create(java.lang.Class)
M:factories.ReportModelFactory:create(),(M)factories.ProviderFactory:create(java.lang.Class)
M:factories.ReportModelFactory:create(),(M)factories.ProviderFactory:create(java.lang.Class)
M:factories.ReportModelFactory:create(),(M)configuration.ReportConfiguration:getAuthor()
M:factories.ReportModelFactory:create(),(M)configuration.ReportConfiguration:getVersion()
M:factories.ReportModelFactory:create(),(M)configuration.ReportConfiguration:getBranch()
M:factories.ReportModelFactory:create(),(M)configuration.ReportConfiguration:getComponentKey()
M:factories.ReportModelFactory:create(),(M)providers.LanguageList:getLanguageList()
M:factories.ReportModelFactory:create(),(M)models.Report:setLanguageList(java.util.ArrayList)
M:factories.ReportModelFactory:create(),(M)configuration.SonarRequestList:getIssueFilter()
M:factories.ReportModelFactory:create(),(M)providers.IssueList:getIssueList(java.util.ArrayList)
M:factories.ReportModelFactory:create(),(M)models.Report:setIssueList(java.util.ArrayList)
M:factories.ReportModelFactory:create(),(M)configuration.SonarRequestList:getMetricFilter()
M:factories.ReportModelFactory:create(),(M)providers.MetricList:create(java.util.ArrayList)
M:factories.ReportModelFactory:create(),(M)models.Report:setMetricList(java.util.ArrayList)
M:factories.ReportModelFactory:create(),(M)providers.MetricList:getIdsAsString()
M:factories.ReportModelFactory:create(),(M)providers.MeasureList:setMetricList(java.lang.String)
M:factories.ReportModelFactory:create(),(M)providers.MeasureList:create()
M:factories.ReportModelFactory:create(),(M)models.Report:setMeasureList(java.util.ArrayList)
M:providers.AbstractProvider:request(java.lang.String),(M)providers.AbstractProvider:stringRequest(java.lang.String)
M:providers.AbstractProvider:request(java.lang.String),(M)providers.AbstractProvider:getGson()
M:providers.AbstractProvider:stringRequest(java.lang.String),(S)providers.RequestManager:getInstance()
M:providers.AbstractProvider:stringRequest(java.lang.String),(M)configuration.ReportConfiguration:getToken()
M:providers.AbstractProvider:stringRequest(java.lang.String),"(M)providers.RequestManager:get(java.lang.String,java.lang.String)"
M:providers.ComponentList:execute(),(M)configuration.API:getCall()
M:providers.ComponentList:execute(),(S)configuration.SonarQubeServer:getSonarQubeServer()
M:providers.ComponentList:execute(),(M)configuration.SonarQubeServer:getUrl()
M:providers.ComponentList:execute(),(M)configuration.ReportConfiguration:getComponentKey()
M:providers.ComponentList:execute(),(M)providers.ComponentList:request(java.lang.String)
M:providers.ComponentList:execute(),(M)providers.ComponentList:getGson()
M:providers.IssueList:getIssueList(java.util.ArrayList),(M)configuration.API:getCall()
M:providers.IssueList:getIssueList(java.util.ArrayList),(S)configuration.SonarQubeServer:getSonarQubeServer()
M:providers.IssueList:getIssueList(java.util.ArrayList),(M)configuration.SonarQubeServer:getUrl()
M:providers.IssueList:getIssueList(java.util.ArrayList),(M)configuration.ReportConfiguration:getComponentKey()
M:providers.IssueList:getIssueList(java.util.ArrayList),(M)providers.IssueList:request(java.lang.String)
M:providers.IssueList:getIssueList(java.util.ArrayList),(M)providers.IssueList:getGson()
M:providers.IssueList:toString(),(M)models.Issue:getKey()
M:providers.IssueList:toString(),(M)models.Issue:getMetric()
M:providers.IssueList:toString(),(M)models.Issue:getMessage()
M:providers.LanguageList:getLanguageList(),(M)configuration.API:getCall()
M:providers.LanguageList:getLanguageList(),(S)configuration.SonarQubeServer:getSonarQubeServer()
M:providers.LanguageList:getLanguageList(),(M)configuration.SonarQubeServer:getUrl()
M:providers.LanguageList:getLanguageList(),(M)providers.LanguageList:request(java.lang.String)
M:providers.LanguageList:getLanguageList(),(M)providers.LanguageList:getGson()
M:providers.LanguageList:toString(),(M)models.Language:getName()
M:providers.MeasureList:create(),(M)configuration.API:getCall()
M:providers.MeasureList:create(),(S)configuration.SonarQubeServer:getSonarQubeServer()
M:providers.MeasureList:create(),(M)configuration.SonarQubeServer:getUrl()
M:providers.MeasureList:create(),(M)configuration.ReportConfiguration:getComponentKey()
M:providers.MeasureList:create(),(M)providers.MeasureList:request(java.lang.String)
M:providers.MeasureList:create(),(M)providers.MeasureList:getGson()
M:providers.MetricList:create(java.util.ArrayList),(M)configuration.API:getCall()
M:providers.MetricList:create(java.util.ArrayList),(S)configuration.SonarQubeServer:getSonarQubeServer()
M:providers.MetricList:create(java.util.ArrayList),(M)configuration.SonarQubeServer:getUrl()
M:providers.MetricList:create(java.util.ArrayList),(M)providers.MetricList:request(java.lang.String)
M:providers.MetricList:create(java.util.ArrayList),(M)providers.MetricList:getGson()
M:providers.MetricList:getIdsAsString(),(M)models.Metric:getKey()
M:providers.MetricList:getIdsAsString(),(M)models.Metric:getKey()
M:providers.RequestManager:extractBaseUrl(java.lang.String),"(S)providers.RequestManager:substringBeforeLast(java.lang.String,java.lang.String)"
"M:providers.RequestManager:substringBeforeLast(java.lang.String,java.lang.String)",(S)providers.RequestManager:isEmpty(java.lang.String)
"M:providers.RequestManager:substringBeforeLast(java.lang.String,java.lang.String)",(S)providers.RequestManager:isEmpty(java.lang.String)
"M:providers.RequestManager:get(java.lang.String,java.lang.String)",(S)providers.RequestManager:extractBaseUrl(java.lang.String)
M:tools.FileTools:deleteFolder(java.io.File),(S)tools.FileTools:deleteFolder(java.io.File)
M:utils.CommandLineManager:getOptionValue(java.lang.String),"(M)utils.CommandLineManager:getOptionValue(java.lang.String,java.lang.String)"
M:utils.StringManager:changeLocale(java.lang.String),"(S)utils.StringManager:changeLocale(java.lang.String,java.lang.String)"
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)",(S)tools.PluginStringManager:getProperty(java.lang.String)
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)",(S)tools.PluginStringManager:getProperty(java.lang.String)
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)",(S)tools.PluginStringManager:getProperty(java.lang.String)
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)",(S)tools.PluginStringManager:getProperty(java.lang.String)
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)","(S)configuration.ReportCommandLine:execute(java.lang.String[],java.lang.String[])"
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)","(S)factories.ReportFactory:formatFilename(java.lang.String,java.lang.String,java.lang.String)"
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)","(S)tools.ZipFolder:pack(java.lang.String,java.lang.String)"
"M:ws.ExportTask:handle(org.sonar.api.server.ws.Request,org.sonar.api.server.ws.Response)",(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:define(org.sonar.api.server.ws.WebService$Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:define(org.sonar.api.server.ws.WebService$Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:define(org.sonar.api.server.ws.WebService$Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:reportAction(org.sonar.api.server.ws.WebService$NewController),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.ReportWs:define(java.lang.Object),(M)ws.ReportWs:define(org.sonar.api.server.ws.WebService$Context)
M:ws.web.ReportPluginPageDefinition:define(org.sonar.api.web.page.Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
M:ws.web.ReportPluginPageDefinition:define(org.sonar.api.web.page.Context),(S)tools.PluginStringManager:getProperty(java.lang.String)
